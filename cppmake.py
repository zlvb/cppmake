#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys

TEMPL = '''# Makefile: auto generated by cppmake

LIBPATH = {libp}
INC = {inc}
LIBS = {lib}
TARGET_BIN = "{out}"
TARGET_PATH = "{__oup}"

CXX = {CXX}
CC = {CC}

CXXFLAGS = {CXXFLAGS}
CFLAGS = {CFLAGS}
OBJPATH = {tmp}/
LDFLAGS = {LDFLAGS}

all : $(TARGET_BIN)

clean :
	rm -rf {tmp}
	rm -rf $(TARGET_BIN)

.PHONY: clean


AllDirs := {src}
SRCS_LIB := $(foreach n,$(AllDirs) , $(wildcard $(n)/*.cpp))
SRCS_LIB_C := $(foreach n,$(AllDirs) , $(wildcard $(n)/*.c))
SRCS_LIB_CC := $(foreach n,$(AllDirs) , $(wildcard $(n)/*.cc))
OBJS_BIN = $(SRCS_LIB:%.cpp=$(OBJPATH)/%.o) $(SRCS_LIB_C:%.c=$(OBJPATH)/%.o) $(SRCS_LIB_CC:%.cc=$(OBJPATH)/%.o)
#$(warning $(OBJS_BIN))

ifneq "$(MAKECMDGOALS)" "clean"
-include $(SRCS_LIB:%.cpp=$(OBJPATH)/%.d)
-include $(SRCS_LIB_CC:%.cc=$(OBJPATH)/%.d)
-include $(SRCS_LIB_C:%.c=$(OBJPATH)/%.d)
endif

$(TARGET_BIN) : $(OBJS_BIN)
	@mkdir -p $(TARGET_PATH)
	@$(CXX) $(CXXFLAGS) -o $@ $^ $(LIBS) $(LDFLAGS)
	@echo $(TARGET_BIN)
    

$(OBJPATH)/%.o : %.cpp
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) $(INC) -o $@ -c $<
	@echo $<

$(OBJPATH)/%.d : %.cpp
	@rm -f $@
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) -pipe $(INC) -MM -MT '$@ $(basename $@).o' $< -o $@

$(OBJPATH)/%.o : %.c
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) $(INC) -o $@ -c $<

$(OBJPATH)/%.d : %.c
	@rm -f $@
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) -pipe $(INC) -MM -MT '$@ $(basename $@).o' $< -o $@

$(OBJPATH)/%.o : %.cc
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) $(INC) -o $@ -c $<

$(OBJPATH)/%.d : %.cc
	@rm -f $@
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) -pipe $(INC) -MM -MT '$@ $(basename $@).o' $< -o $@

'''

dirtempl = r'''$(shell ls -R %s|grep '^\./.*:$$'|awk '{gsub(":","");print}')'''
inctempl = '-I%s'
libptempl = '-L%s'
libtempl = '-l%s'
deftempl = '%s'

src = []
inc = []
tmp = ['./build/temp']
out = ['a.out']
outpath = ['./']
libp = []
lib = []
CXX = ['g++ -std=gnu++1y']
CC = ['gcc -std=c11']
CXXFLAGS = ['-pipe -Wall -Wno-trigraphs -Werror -Wextra -Wno-unused-parameter -g3 -ggdb3 -O0 -D_DEBUG']
CFLAGS = [CXXFLAGS[0]]
LDFLAGS = []

cxx_use_default_flags = True
c_use_default_flags = True

import_files = []

templ_table = (
    ('src', dirtempl, src, 0),
    ('inc', inctempl, inc, 0),
    ('tmp', deftempl, tmp, 1),
    ('out', deftempl, out, 1),
    ('add', deftempl, import_files, 0),
    ('__oup', deftempl, outpath, 1),
    ('lib', libtempl, lib, 0),
    ('libp', libptempl, libp, 0),
    ('CXX', deftempl, CXX, 1),
    ('CC', deftempl, CC, 1),
    ('CXXFLAGS', deftempl, CXXFLAGS, 0),
    ('CFLAGS', deftempl, CFLAGS, 0),
    ('LDFLAGS', deftempl, LDFLAGS, 0),
)

proced_files = set()

templ_map = {}
for tr in templ_table: 
    templ_map[tr[0]+':'] = (len(tr[0])+1, tr[1], tr[2])


def getfilename():
    if len(sys.argv) == 1:
        return "cppmake.txt"
    elif len(sys.argv) == 2:
        return sys.argv[1]
    else:
        quit()

def addtoArr(key, arr, templ, s):
    global cxx_use_default_flags
    global c_use_default_flags
    if cxx_use_default_flags and key == 'CXXFLAGS:':
        del arr[:]
        cxx_use_default_flags = False
    elif c_use_default_flags and key == 'CFLAGS:':
        del arr[:]
        c_use_default_flags = False

    dirs = s.split(',')
    for d in dirs:
        #print (d,arr)
        arr.append(templ % d.strip())


def replaceTempl(templ, flag, arr):
    return templ.replace('{%s}' % flag, ' '.join(arr))


def getparam(line):
    line = line.strip()
    for k, v in templ_map.items():
        kl, tmpl, arr = v
        key = line[:kl]
        if key == k:
            #print(key, k, tmpl, arr)
            addtoArr(key, arr, tmpl, line[kl:])

def proc_cppmake(fn):
    if fn in proced_files:
        return

    fd = open(fn, "rb")
    if not fd:
        print("no inputfile")
        quit()

    txt = fd.read()
    fd.close()
    cmdlines = txt.split('\n')

    for line in cmdlines:
        line = line.strip()
        getparam(line)

    proced_files.add(fn)

    proc_import()

def proc_import():
    global import_files
    temp = import_files
    import_files = []
    
    while True:
        for fn in temp:
            #print('proc import %s' % fn)
            proc_cppmake(fn)
        if not import_files:
            break

def proc_something():
    arr = out[-1:][0]
    oup = arr.split('/')
    oup.pop()
    outpath.append('/'.join(oup))


def export_Makefile():
    fd = open("Makefile", "wb+")
    result = TEMPL
    for tr in templ_table:
        if tr[3] == 0:
            result = replaceTempl(result, tr[0], tr[2])
        else:
            result = replaceTempl(result, tr[0], tr[2][-1:])

    fd.write(result)
    fd.close()

if __name__ == "__main__":
    fn = getfilename()
    proc_cppmake(fn)
    proc_something()
    export_Makefile()
